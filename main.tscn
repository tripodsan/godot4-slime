[gd_scene load_steps=2 format=3 uid="uid://c3mqscntqy0yf"]

[sub_resource type="GDScript" id="GDScript_f0mra"]
script/source = "extends Node2D


func _init_shader():
  var rd := RenderingServer.create_local_rendering_device()
  var file_path = \"res://compute_example.glsl\"
  var shader_file := load(file_path)
  var shader_spirv: RDShaderSPIRV = shader_file.get_spirv()

  if shader_spirv == null:
      printerr('[Simulator] failed to load SPIRV compute shader %s' % file_path)
      return

  if shader_spirv.compile_error_compute.length() > 0:
      printerr('[Simulator] compute shader compile error: ', shader_spirv.compile_error_compute)
      return

  var shader := rd.shader_create_from_spirv(shader_spirv)

  # Prepare our data. We use doubles in the shader, so we need 64 bit.
  var input := PackedFloat64Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  var input_bytes := input.to_byte_array()

  # Create a storage buffer that can hold our double values.
  # Each double has 8 byte (64 bit) so 10 x 8 = 80 bytes
  var buffer := rd.storage_buffer_create(input_bytes.size(), input_bytes)

  # Create a uniform to assign the buffer to the rendering device
  var uniform := RDUniform.new()
  uniform.uniform_type = RenderingDevice.UNIFORM_TYPE_STORAGE_BUFFER
  uniform.binding = 0 # this needs to match the \"binding\" in our shader file
  uniform.add_id(buffer)
  var uniform_set := rd.uniform_set_create([uniform], shader, 0) # the last parameter (the 0) needs to match the \"set\" in our shader file
    
  # Create a compute pipeline
  var pipeline := rd.compute_pipeline_create(shader)
  var compute_list := rd.compute_list_begin()
  rd.compute_list_bind_compute_pipeline(compute_list, pipeline)
  rd.compute_list_bind_uniform_set(compute_list, uniform_set, 0)
  rd.compute_list_dispatch(compute_list, 5, 1, 1)
  rd.compute_list_end()  
  
  rd.submit()
  rd.sync()
  
  # Read back the data from the buffer
  var output_bytes := rd.buffer_get_data(buffer)
  var output := output_bytes.to_float64_array()
  print(\"Input: \", input)
  print(\"Output: \", output)

# Called when the node enters the scene tree for the first time.
func _ready():
  _init_shader()
  pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
  pass
"

[node name="Node2d" type="Node2D"]
script = SubResource("GDScript_f0mra")
